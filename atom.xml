<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鱼塘]]></title>
  <subtitle><![CDATA[Hey， I am jinzhaoyu !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.jinzhaoyu.com/"/>
  <updated>2015-11-17T11:46:45.000Z</updated>
  <id>http://www.jinzhaoyu.com/</id>
  
  <author>
    <name><![CDATA[jinzhaoyu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android - 琢磨隐藏前台服务的过程-隐藏的!]]></title>
    <link href="http://www.jinzhaoyu.com/2015/11/17/android-hidden-foreground-service/"/>
    <id>http://www.jinzhaoyu.com/2015/11/17/android-hidden-foreground-service/</id>
    <published>2015-11-17T11:46:45.000Z</published>
    <updated>2015-11-17T11:46:45.000Z</updated>
    <content type="html"><![CDATA[<p>在国内，Android平台下的应用因为种种原因，都必须要各自做各自的推送通道。然而，由于Android系统的特性，这些需要保持通道连接的应用，又要想方设法的防止被系统杀掉。（这时候真的觉得Apple的APNs 是一个神一样的存在！）</p>
<pre><code>于是乎各种综合手段就都会用上了，比如分出一个守护进程，这个进程做的都是轻量的事情，甚至只检测主要进程的存活性。同时又在这个进程中启动一个前台服务（Foreground Service），尽可能减少这个守护进程被系统回收的机会。这里我就只说一下前台服务的事。

Android 系统的内存回收真正的执行者是 <span class="function"><span class="title">LowMemoryKiller</span><span class="params">(这里不做过多描述，可以参考： http://www.cnblogs.com/angeldevil/archive/<span class="number">2013</span>/<span class="number">05</span>/<span class="number">21</span>/<span class="number">3090872</span>.html)</span></span> ，它将进程分了几个层次，其中最高层次的是：
</code></pre><p>// This is the process running the current foreground app.  We’d really<br>// rather not kill it!<br>static final int FOREGROUND_APP_ADJ = 0;</p>
<pre><code>也就是说，前台进程是最后了，逼不得已的情况下才会去释放它占用的内存的。前台进程就是当前正在前台显示的，用户正在操作的界面，或者是一个前台的服务。

<span class="keyword">Android系统要求前台服务必须要发送一个Notification，以便告知用户有应用一直在运行中，让用户感知到这个应用可能会耗费他的电池或流量。但是有些时候，我们确实想隐藏这种Notification，还要保持在前台服务的运行，因为常驻通知栏的图标，有的用户需要，有的用户则强烈要求去掉。
</span>
 我们发现，手机QQ有一个前台服务，可是状态栏和通知中心都看不到QQ的任何通知图标，用如下命令可以dump出来系统中正在运行的所有的Service ：
</code></pre><p>adb shell dumpsys activity services<br>   可以看到手机QQ有三个Service：</p>
<ul>
<li>ServiceRecord{43a6db20 u0 com.tencent.mobileqq/.app.CoreService}<br>intent={cmp=com.tencent.mobileqq/.app.CoreService}<br>packageName=com.tencent.mobileqq<br>processName=com.tencent.mobileqq<br>baseDir=/data/app/com.tencent.mobileqq-2.apk<br>dataDir=/data/data/com.tencent.mobileqq<br>app=ProcessRecord{435c1a98 8126:com.tencent.mobileqq/u0a10145}<br>createTime=-9m52s660ms lastActivity=-4m52s742ms<br>executingStart=-4m52s742ms restartTime=-9m52s660ms<br>startRequested=true stopIfKilled=false callStart=true lastStartId=7</li>
</ul>
<ul>
<li>ServiceRecord{4378c818 u0 com.tencent.mobileqq/.app.CoreService$KernelService}<br>intent={cmp=com.tencent.mobileqq/.app.CoreService$KernelService}<br>packageName=com.tencent.mobileqq<br>processName=com.tencent.mobileqq<br>baseDir=/data/app/com.tencent.mobileqq-2.apk<br>dataDir=/data/data/com.tencent.mobileqq<br>app=ProcessRecord{435c1a98 8126:com.tencent.mobileqq/u0a10145}<br>isForeground=true foregroundId=537041609 foregroundNoti=Notification(pri=0 icon=7f020314 contentView=com.tencent.mobileqq/0x10900b4 vibrate=null sound=null defaults=0x0 flags=0x62 when=1429702926311 ledARGB=0x0 contentIntent=Y deleteIntent=N contentTitle=QQ正在执行中 contentText=触控来取得更多信息，或停止应用程序 tickerText=N kind=[null])<br>createTime=-9m51s902ms lastActivity=-9m51s902ms<br>executingStart=-9m51s897ms restartTime=-9m51s902ms<br>startRequested=true stopIfKilled=true callStart=true lastStartId=1</li>
</ul>
<ul>
<li>ServiceRecord{43a12670 u0 com.tencent.mobileqq/.msf.service.MsfService}<br>intent={cmp=com.tencent.mobileqq/.msf.service.MsfService}<br>packageName=com.tencent.mobileqq<br>processName=com.tencent.mobileqq:MSF<br>baseDir=/data/app/com.tencent.mobileqq-2.apk<br>dataDir=/data/data/com.tencent.mobileqq<br>app=ProcessRecord{432900e0 3974:com.tencent.mobileqq:MSF/u0a10145}<br>createTime=-8d3h5m17s705ms lastActivity=-9m50s414ms<br>……………………</li>
</ul>
<pre><code>注意上面的标红的 .app.CoreService<span class="variable">$KernelService</span> ，其中有一个 isForeground=<span class="literal">true</span> 属性，其值为<span class="literal">true</span>，并且也设置了 foregroundNoti 的值，从这个Notification也看不出来有什么异常。
</code></pre><p>一开始以为他们用了什么手段搞了个看不见的通知，比如透明的图标或者高度为0的RemoteView，我也按这种思路去尝试了下，总有一个占位的Notification在。再 dump 出 Notification ：</p>
<p>adb shell dumpsys statusbar<br>    查看 Notification list ，可以看到我做的透明的通知，却看不到有他们的任何 StatusBarNotification 那么它是怎么做到隐藏这个通知的呢？试试反编，看看他们的代码！<br>    于是我就用 Android反编工具 试着反编手机QQ最新版 5.5.1.2435 ，直接就失败了，因为他们做了反apkTool的工作，无法用apkTool去解压他们的apk包。没关系，那我就直接解压缩QQ的安装包，毕竟apk也就是一种zip格式嘛。unzip解压后，可以看到目录中有一个 9.9M 的 classes.dex , 用 dex2jar 2.0 反编译它： </p>
<p>./decompileAndroid/dex2jar-2.0/d2j-dex2jar.sh -o source.jar classes.dex<br>    竟然成功了！！用JD—GUI，打开这个source.jar文件，找到 CoreService 和其内部类 KernelService ： com.tencent.mobileqq.app.CoreService 、 com.tencent.mobileqq.app.CoreService$KernelService ,代码内容我就不贴出来了，有兴趣的同学可以自己动动手或者从附件中下载。这里我只说下我理解的大致过程：</p>
<p>1、 CoreService 是一个假的Service，应用启动时即开始启动这个Service，这个Service 会在 onCreate() 中就 startForeground() ，传的 Notification 是 new 出的一个空的通知，通知 ID 为固定的值。</p>
<p>2、 启动完 CoreService 就开始启动真正的 KernelService</p>
<p>3、 KernelService中将 CoreService 再次 startForeground() ，然后再把自己 startForeground() ，最后再把 CoreService stopForeground() 掉。这是非常关键的一步。同时，要确保两个 Service startForeground()时使用的 Notification ID 都是同一个！</p>
<pre><code>最终，仿照手机QQ的实现代码为： 
</code></pre><p>public class MessageCenterService extends Service {</p>
<pre><code><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String sTAG = <span class="string">"MessageCenterService"</span>;

<span class="comment">//9521 就是你的终身代号 :)</span>
<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTIFY_ID = <span class="number">9521</span>;

<span class="keyword">private</span> <span class="keyword">static</span> MessageCenterService instance;

<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">MessageCenterService <span class="title">getInstance</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> instance;
}

<span class="comment">/**
 * 启动前台服务
 */</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{
    <span class="keyword">try</span> {
        Intent intent = <span class="keyword">new</span> Intent(App.getContext(), MessageCenterService.class);
        App.getContext().startService(intent);
    } <span class="keyword">catch</span> (Exception e) {
        LogUtil.e(sTAG, <span class="string">""</span>, e);
    }
}

<span class="comment">/**
 * 终止前台服务。包含{<span class="doctag">@link</span> MessageCenterService.KernelService}
 */</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{
    <span class="keyword">try</span> {
        Intent intent = <span class="keyword">new</span> Intent(App.getContext(), MessageCenterService.class);
        App.getContext().stopService(intent);

        stopKernel();
    } <span class="keyword">catch</span> (Exception e) {
        LogUtil.e(sTAG, <span class="string">""</span>, e);
    }
}

<span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">startKernel</span><span class="params">()</span> </span>{
    <span class="keyword">try</span> {
        Intent intent = <span class="keyword">new</span> Intent(App.getContext(), KernelService.class);
        App.getContext().startService(intent);
    } <span class="keyword">catch</span> (Exception e) {
        LogUtil.e(sTAG, <span class="string">""</span>, e);
    }
}

<span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">stopKernel</span><span class="params">()</span> </span>{
    <span class="keyword">try</span> {
        Intent intent = <span class="keyword">new</span> Intent(App.getContext(), KernelService.class);
        App.getContext().stopService(intent);
    } <span class="keyword">catch</span> (Exception e) {
        LogUtil.e(sTAG, <span class="string">""</span>, e);
    }
}

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{
    <span class="keyword">super</span>.onCreate();
    instance = <span class="keyword">this</span>;
    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR2) {
        startForeground(NOTIFY_ID, <span class="keyword">new</span> Notification());
    }
}

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>{
    <span class="comment">//启动真正的Service</span>
    startKernel();
    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;
}

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{
    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR2) {
        stopForeground(<span class="keyword">true</span>);
    }
    <span class="keyword">super</span>.onDestroy();
}

<span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{
    <span class="keyword">return</span> <span class="keyword">null</span>;
}


<span class="comment">/**
 *
 */</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KernelService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>{
    <span class="keyword">private</span> <span class="keyword">static</span> KernelService instance;

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">KernelService <span class="title">getInstance</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> instance;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{
        <span class="keyword">super</span>.onCreate();
        instance = <span class="keyword">this</span>;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>{
        <span class="keyword">super</span>.onStartCommand(intent, flags, startId);
        <span class="keyword">try</span> {
            MessageCenterService fakeService = MessageCenterService.getInstance();
            fakeService.startForeground(NOTIFY_ID, <span class="keyword">new</span> Notification());
            startForeground(NOTIFY_ID, <span class="keyword">new</span> Notification());
            fakeService.stopForeground(<span class="keyword">true</span>);
        } <span class="keyword">catch</span> (Exception e) {
            LogUtil.e(sTAG, <span class="string">" **** Can not start foreground service !! ****"</span>, e);
        }
        <span class="keyword">return</span> START_STICKY;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{
        stopForeground(<span class="keyword">true</span>);
        instance = <span class="keyword">null</span>;
        <span class="keyword">super</span>.onDestroy();
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }
}
</code></pre><p>}</p>
<p>里面有一些自己的工具类什么的，大家可以替换为自己的东西，同时别忘了在 AndroidManifest.xml中定义下这两个Service：<br>       <service android:name=".service.MessageCenterService$KernelService" android:label="@string/message_center_service" android:exported="false"><br>        <service android:name=".service.MessageCenterService" android:label="@string/message_center_service" android:exported="false"></service></service></p>
<pre><code>今天又去stackOverflow上有针对性的查了下这个方法，还真有人说过这种处理方式：

  http:<span class="comment">//stackoverflow.com/a/18281520</span>


以上就可以实现一个隐藏的前台服务，增加应用的存活率。看下LowMemoryKiller的分析后，你就应该知道，无论是那种级别的进程，都会有一个内存占用的阈值的，超过这个阈值同样会被杀，所以，优化好应用的内存使用也同样重要。

各位有什么问题或建议，请留言，Thanks ~
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>在国内，Android平台下的应用因为种种原因，都必须要各自做各自的推送通道。然而，由于Android系统的特性，这些需要保持通道连接的应用，又要想方设法的防止被系统杀掉。（这时候真的觉得Apple的APNs 是一个神一样的存在！）</p>
<pre><code>于是乎各种]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android - 支持multidex后NoClassDefFoundError的解决办法]]></title>
    <link href="http://www.jinzhaoyu.com/2015/11/17/android-multidex-noclassdeffound/"/>
    <id>http://www.jinzhaoyu.com/2015/11/17/android-multidex-noclassdeffound/</id>
    <published>2015-11-17T11:45:36.000Z</published>
    <updated>2015-11-17T11:45:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>Android应用支持multiDex以后，在某些5.0以下的机型上，会遇到某些类由于没有被打进MainDex中，而导致的 NoClassDefFoundError 错误。</p>
<p><strong><em>更多关于 ClassNotFoundException 和 NoClassDefFoundError 的讨论 <a href="http://stackoverflow.com/a/1457879/5571166" target="_blank" rel="external">可以到这里查看</a>.</em></strong></p>
<h2 id="解决方式">解决方式</h2><h3 id="过时的方式">过时的方式</h3><p>在使用Android gradle build tools 1.2.3 版本的时候，我们在 build.gradle 的 <code>defaultConfig</code> 中加入一个非公开属性 <code>multiDexKeepFile</code></p>
<blockquote>
<p>multiDexKeepFile file(“multidex.keep”)</p>
</blockquote>
<p>这个<code>multidex.keep</code>的内容，是要保持类在MainDex中的Class列表，如：</p>
<pre><code>com<span class="regexp">/alibaba/</span>mobileim<span class="regexp">/channel/</span>util/SimpleKVStore.<span class="keyword">class</span>
com<span class="regexp">/alibaba/</span>mobileim<span class="regexp">/channel/</span>util/SimpleKVStore$SingletonHolder.<span class="keyword">class</span>
android<span class="regexp">/webkit/</span>JniUtil.<span class="keyword">class</span>
mtopsdk<span class="regexp">/xstate/</span>XState.<span class="keyword">class</span>
android<span class="regexp">/app/</span>ANRManagerProxy.<span class="keyword">class</span>
</code></pre><h3 id="新的方式">新的方式</h3><p>但是随着升级 build tools 到 1.3.+ 的版本以后，这个功能就失效了。</p>
<h4 id="分析">分析</h4><p>查询了代码 1.2.3 和 1.3.1 的 build tools源码后，发现原来在 1.2.3版本 <a href="https://android.googlesource.com/platform/tools/base/+/gradle_1.2.3/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/TaskManager.groovy" target="_blank" rel="external">TaskManager.groovy</a> 中 createPostCompilationTasks()方法里读取 <code>multiDexKeepFile</code>属性的代码都被干掉了。</p>
<blockquote>
<p>File multiDexKeepFile = config.getMultiDexKeepFile();</p>
</blockquote>
<p>1.3.0 及以后的版本中，优化了代码结构，设计了一些<a href="https://android.googlesource.com/platform/tools/base/+/gradle_1.3.1/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/tasks/multidex/" target="_blank" rel="external">新的用于处理MultiDex的Task类</a>:</p>
<pre><code>CreateMainDexList<span class="class">.groovy</span>
CreateManifestKeepList<span class="class">.groovy</span>
JarMergingTask<span class="class">.groovy</span>
RetraceMainDexList.groovy
</code></pre><p>通过查看<a href="https://android.googlesource.com/platform/tools/base/+/gradle_1.3.1/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/tasks/multidex/CreateMainDexList.groovy" target="_blank" rel="external">CreateMainDexList.groovy</a> 可以看出这个任务最终<br>会生成一个存储了所有应该在MainDex中的类列表的文件：<code>maindexlist.txt</code>。</p>
<p>生成的文件路径是从 <a href="https://android.googlesource.com/platform/tools/base/+/gradle_1.3.1/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/scope/VariantScope.java" target="_blank" rel="external">VariantScope.java </a> 的<code>getMainDexListFile()</code>中获取的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> File <span class="title">getMainDexListFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> File(globalScope.getIntermediatesDir(), <span class="string">"multi-dex/"</span> + </span><br><span class="line">       getVariantConfiguration().getDirName() + <span class="string">"/maindexlist.txt"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>最终生成的这个 <code>maindexlist.txt</code> 文件会被<a href="https://android.googlesource.com/platform/tools/base/+/gradle_1.3.1/build-system/builder/src/main/java/com/android/builder/core/DexProcessBuilder.java" target="_blank" rel="external">DexProcessBuilder.java</a>通过<code>--multi-dex --main-dex-list</code>参数传递给Build tools中的 <code>dx.jar</code>(在Android sdk跟目录下有个<code>build-tools</code>目录，你可以在这里找到这个jar)，<code>dx.jar</code>会用这个列表文件生成MainDex。</p>
<h4 id="解决思路">解决思路</h4><p>关键的来了，我们知道新的build tools是通过 <code>createMainDexList</code> 这个Task来生成的<code>maindexlist.txt</code>，然后才给 <code>dx.jar</code>去读取生成 MainDex，那么我们是不是可以hack一下构建过程，在 <code>createMainDexList</code> 执行完以后，我们去修改<code>maindexlist.txt</code>文件，以达到手工设置MainDex内容的目的呢？</p>
<h4 id="代码实现">代码实现</h4><p>结合gradle的构建过程，原来的<code>multidex.keep</code>文件位置和内容不变，最终实现代码如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">    tasks.matching&#123;</span><br><span class="line">        it.name.startsWith(<span class="string">'create'</span>) &amp;&amp; it.name.endsWith(<span class="string">'MainDexClassList'</span>)</span><br><span class="line">    &#125;.each &#123; tk -&gt;</span><br><span class="line">        tk.doLast &#123;</span><br><span class="line">            keepMainMultiDex(tk.outputFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 控制MainDex中的class列表</span><br><span class="line"> * 将multidex.keep的内容追加到 maindexlist.txt 中</span><br><span class="line"> * <span class="doctag">@param</span> outputFile</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">def</span> keepMainMultiDex(File outputFile)&#123;</span><br><span class="line">    File keepFile = file(<span class="string">"multidex.keep"</span>);</span><br><span class="line">    outputFile &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">    outputFile &lt;&lt; keepFile.getText(<span class="string">'UTF-8'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打完收工~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><p>Android应用支持multiDex以后，在某些5.0以下的机型上，会遇到某些类由于没有被打进MainDex中，而导致的 NoClassDefFoundError 错误。</p>
<p><strong><em>更多关于 ClassNo]]>
    </summary>
    
  </entry>
  
</feed>
